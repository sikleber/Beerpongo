# dev configuration
dynamoDB:
  stackName: 'BeerpongoDynamoDbStackDev'
  gamesTable:
    id: 'BeerpongoDevGamesTable'
    tableName: 'BeerpongoDevGamesTable'

lambda:
  stackName: 'BeerpongoLambdaStackDev'
  lambdas:
    lambda_on_create_game:
      name: "lambdaDev_createGame"
      code: "./../backend/websocket_lambdas"
      handler: "lambda_on_create_game.on_create_game"
      runtime: "python3.9"
    lambda_on_join_game:
      name: "lambdaDev_joinGame"
      code: "./../backend/websocket_lambdas"
      handler: "lambda_on_join_game.on_join_game"
      runtime: "python3.9"
    lambda_on_update_game:
      name: "lambdaDev_updateGame"
      code: "./../backend/websocket_lambdas"
      handler: "lambda_on_update_game.on_update_game"
      runtime: "python3.9"

apiGatewayWebsocket:
  stackName: 'BeerpongoAPIGatewayWebsocketStackDev'
  id: 'BeerpongoDevWebsocketApi'
  name: 'BeerpongoDevWebsocketApi'
  stage:
    id: 'BeerpongoWebsocketStageDev'
    name: 'dev'
  createGameRoute:
    id: 'CreateGameIntegrationDev'
    responseId: 'CreateGameIntegrationDev'
    key: 'CreateGame'
  joinGameRoute:
    id: 'JoinGameIntegrationDev'
    responseId: 'JoinGameIntegrationDev'
    key: 'JoinGame'
  updateGameRoute:
    id: 'UpdateGameIntegrationDev'
    responseId: 'UpdateGameIntegrationDev'
    key: 'UpdateGame'

cognito:
  stackName: 'BeerpongoCognitoStackDev'
  userPool:
    id: 'BeerpongoDevUserPool'
    name: 'BeerpongoDevUserPool'
  userPoolClient:
    id: 'BeerpongoDevUserPoolClient'
    name: 'BeerpongoDevUserPoolClient'

